//
//Runtime 216
//Memory Usage 64.8
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int djs[n];
        
        function<int(int)> parent = [&](int u){
            return u == djs[u] ? u : djs[u] = parent(djs[u]);
        };
        
        for(int i = 0; i < n; ++i)
            djs[i] = i;
        
        for(int i = 0; i < n; ++i)
            for(int j = i + 1; j < n; ++j)
                if(graph[i][j])
                    djs[parent(i)] = parent(j);
        
        int area[n], mal[n];
        
        memset(area, 0, sizeof(area));
        memset(mal, 0, sizeof(mal));
        
        for(int i = 0; i < n; ++i)
            area[parent(i)]++;
        
        for(const int init : initial)
            mal[parent(init)]++;
        
        pair<int, int> res = {0, initial[0]};
        
        for(const int init : initial){
            int p = parent(init);
            res = min(res, {(mal[p] == 1) * (-area[p]), init});   
        }
        return res.second;

    }
};